diff -Naur framework-arduinoespressif32/libraries/BLE/src/BLEClient.cpp framework-arduinoespressif32_rix/libraries/BLE/src/BLEClient.cpp
--- framework-arduinoespressif32/libraries/BLE/src/BLEClient.cpp	2019-10-02 11:52:48.000000000 +0200
+++ framework-arduinoespressif32_rix/libraries/BLE/src/BLEClient.cpp	2020-01-16 23:10:13.549001900 +0100
@@ -20,7 +20,7 @@
 #include "BLEDevice.h"
 #include "esp32-hal-log.h"
 
-/*
+	/*
  * Design
  * ------
  * When we perform a searchService() requests, we are asking the BLE server to return each of the services
@@ -180,15 +180,17 @@
 		case ESP_GATTC_DISCONNECT_EVT: {
 				// If we receive a disconnect event, set the class flag that indicates that we are
 				// no longer connected.
-				m_isConnected = false;
-				if (m_pClientCallbacks != nullptr) {
-					m_pClientCallbacks->onDisconnect(this);
+				if(evtParam->disconnect.conn_id== m_conn_id) {
+					m_isConnected = false;
+					if (m_pClientCallbacks != nullptr) {
+						m_pClientCallbacks->onDisconnect(this);
+					}
+					esp_ble_gattc_app_unregister(m_gattc_if);
+					m_semaphoreOpenEvt.give(ESP_GATT_IF_NONE);
+					m_semaphoreRssiCmplEvt.give();
+					m_semaphoreSearchCmplEvt.give(1);
+					BLEDevice::removePeerDevice(m_appId, true);
 				}
-				esp_ble_gattc_app_unregister(m_gattc_if);
-				m_semaphoreOpenEvt.give(ESP_GATT_IF_NONE);
-				m_semaphoreRssiCmplEvt.give();
-				m_semaphoreSearchCmplEvt.give(1);
-				BLEDevice::removePeerDevice(m_appId, true);
 				break;
 		} // ESP_GATTC_DISCONNECT_EVT
 
diff -Naur framework-arduinoespressif32/libraries/BLE/src/BLERemoteCharacteristic.cpp framework-arduinoespressif32_rix/libraries/BLE/src/BLERemoteCharacteristic.cpp
--- framework-arduinoespressif32/libraries/BLE/src/BLERemoteCharacteristic.cpp	2019-10-02 11:52:48.000000000 +0200
+++ framework-arduinoespressif32_rix/libraries/BLE/src/BLERemoteCharacteristic.cpp	2020-01-18 22:28:18.523233300 +0100
@@ -20,7 +20,6 @@
 #include "BLERemoteDescriptor.h"
 #include "esp32-hal-log.h"
 
-
 /**
  * @brief Constructor.
  * @param [in] handle The BLE server side handle of this characteristic.
@@ -161,7 +160,7 @@
 			if (evtParam->notify.handle != getHandle()) break;
 			if (m_notifyCallback != nullptr) {
 				log_d("Invoking callback for notification on characteristic %s", toString().c_str());
-				m_notifyCallback(this, evtParam->notify.value, evtParam->notify.value_len, evtParam->notify.is_notify);
+				m_notifyCallback(this, evtParam->notify.value, evtParam->notify.value_len, evtParam->notify.is_notify, m_notifyCallbackParam);
 			} // End we have a callback function ...
 			break;
 		} // ESP_GATTC_NOTIFY_EVT
@@ -240,6 +239,12 @@
 		default:
 			break;
 	} // End switch
+
+	// Send the event to each of the characteristic's descriptor.
+	for (auto &myPair : m_descriptorMap) {
+	   myPair.second->gattClientEventHandler(event, gattc_if, evtParam);
+	}
+
 }; // gattClientEventHandler
 
 
@@ -270,6 +275,9 @@
 			break;
 		}
 
+		if (status == ESP_GATT_NOT_FOUND) {
+			break;
+		}
 		if (status != ESP_GATT_OK) {
 			log_e("esp_ble_gattc_get_all_descr: %s", BLEUtils::gattStatusToString(status).c_str());
 			break;
@@ -434,10 +442,11 @@
  * unregistering a notification.
  * @return N/A.
  */
-void BLERemoteCharacteristic::registerForNotify(notify_callback notifyCallback, bool notifications) {
+void BLERemoteCharacteristic::registerForNotify(notify_callback notifyCallback, bool notifications, void* param) {
 	log_v(">> registerForNotify(): %s", toString().c_str());
 
 	m_notifyCallback = notifyCallback;   // Save the notification callback.
+	m_notifyCallbackParam = param;
 
 	m_semaphoreRegForNotifyEvt.take("registerForNotify");
 
@@ -489,7 +498,7 @@
 void BLERemoteCharacteristic::removeDescriptors() {
 	// Iterate through all the descriptors releasing their storage and erasing them from the map.
 	for (auto &myPair : m_descriptorMap) {
-	   m_descriptorMap.erase(myPair.first);
+//	   m_descriptorMap.erase(myPair.first);
 	   delete myPair.second;
 	}
 	m_descriptorMap.clear();   // Technically not neeeded, but just to be sure.
@@ -565,7 +574,6 @@
 		response?ESP_GATT_WRITE_TYPE_RSP:ESP_GATT_WRITE_TYPE_NO_RSP,
 		ESP_GATT_AUTH_REQ_NONE
 	);
-
 	if (errRc != ESP_OK) {
 		log_e("esp_ble_gattc_write_char: rc=%d %s", errRc, GeneralUtils::errorToString(errRc));
 		return;
diff -Naur framework-arduinoespressif32/libraries/BLE/src/BLERemoteCharacteristic.h framework-arduinoespressif32_rix/libraries/BLE/src/BLERemoteCharacteristic.h
--- framework-arduinoespressif32/libraries/BLE/src/BLERemoteCharacteristic.h	2019-10-02 11:52:48.000000000 +0200
+++ framework-arduinoespressif32_rix/libraries/BLE/src/BLERemoteCharacteristic.h	2020-01-15 23:01:26.315437700 +0100
@@ -21,7 +21,7 @@
 
 class BLERemoteService;
 class BLERemoteDescriptor;
-typedef void (*notify_callback)(BLERemoteCharacteristic* pBLERemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify);
+typedef void (*notify_callback)(BLERemoteCharacteristic* pBLERemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify, void* param);
 
 /**
  * @brief A model of a remote %BLE characteristic.
@@ -45,7 +45,7 @@
 	uint8_t     readUInt8();
 	uint16_t    readUInt16();
 	uint32_t    readUInt32();
-	void        registerForNotify(notify_callback _callback, bool notifications = true);
+	void        registerForNotify(notify_callback _callback, bool notifications = true, void* param = nullptr);
 	void        writeValue(uint8_t* data, size_t length, bool response = false);
 	void        writeValue(std::string newValue, bool response = false);
 	void        writeValue(uint8_t newValue, bool response = false);
@@ -76,6 +76,7 @@
 	std::string          m_value;
 	uint8_t 			 *m_rawData;
 	notify_callback		 m_notifyCallback;
+	void*				 m_notifyCallbackParam;
 
 	// We maintain a map of descriptors owned by this characteristic keyed by a string representation of the UUID.
 	std::map<std::string, BLERemoteDescriptor*> m_descriptorMap;
diff -Naur framework-arduinoespressif32/libraries/BLE/src/BLERemoteDescriptor.cpp framework-arduinoespressif32_rix/libraries/BLE/src/BLERemoteDescriptor.cpp
--- framework-arduinoespressif32/libraries/BLE/src/BLERemoteDescriptor.cpp	2019-10-02 11:52:48.000000000 +0200
+++ framework-arduinoespressif32_rix/libraries/BLE/src/BLERemoteDescriptor.cpp	2020-01-15 18:28:29.463108800 +0100
@@ -21,6 +21,65 @@
 	m_pRemoteCharacteristic = pRemoteCharacteristic;
 }
 
+/**
+ * @brief Handle GATT Client events.
+ * When an event arrives for a GATT client we give this descriptor the opportunity to
+ * take a look at it to see if there is interest in it.
+ * @param [in] event The type of event.
+ * @param [in] gattc_if The interface on which the event was received.
+ * @param [in] evtParam Payload data for the event.
+ * @returns N/A
+ */
+void BLERemoteDescriptor::gattClientEventHandler(esp_gattc_cb_event_t event, esp_gatt_if_t gattc_if, esp_ble_gattc_cb_param_t* evtParam) {
+	switch(event) {
+		// ESP_GATTC_READ_DESCR_EVT
+		// This event indicates that the server has responded to the read request.
+		//
+		// read:
+		// - esp_gatt_status_t  status
+		// - uint16_t           conn_id
+		// - uint16_t           handle
+		// - uint8_t*           value
+		// - uint16_t           value_len
+		case ESP_GATTC_READ_DESCR_EVT: {
+			// If this event is not for us, then nothing further to do.
+			if (evtParam->read.handle != getHandle()) break;
+
+			// At this point, we have determined that the event is for us, so now we save the value
+			// and unlock the semaphore to ensure that the requestor of the data can continue.
+			if (evtParam->read.status == ESP_GATT_OK) {
+				m_value = std::string((char*) evtParam->read.value, evtParam->read.value_len);
+			} else {
+				m_value = "";
+			}
+
+			m_semaphoreReadDescrEvt.give();
+			break;
+		} // ESP_GATTC_READ_DESCR_EVT
+
+		// ESP_GATTC_WRITE_DESCR_EVT
+		//
+		// write:
+		// - esp_gatt_status_t status
+		// - uint16_t          conn_id
+		// - uint16_t          handle
+		case ESP_GATTC_WRITE_DESCR_EVT: {
+			// Determine if this event is for us and, if not, pass onwards.
+			if (evtParam->write.handle != getHandle()) break;
+
+			// There is nothing further we need to do here.  This is merely an indication
+			// that the write has completed and we can unlock the caller.
+			m_semaphoreWriteDescrEvt.give();
+			break;
+		} // ESP_GATTC_WRITE_CHAR_EVT
+
+
+		default:
+			break;
+	} // End switch
+
+}; // gattClientEventHandler
+
 
 /**
  * @brief Retrieve the handle associated with this remote descriptor.
@@ -136,6 +195,7 @@
 		return;
 	}
 
+	m_semaphoreWriteDescrEvt.take("writeValue");
 	esp_err_t errRc = ::esp_ble_gattc_write_char_descr(
 		m_pRemoteCharacteristic->getRemoteService()->getClient()->getGattcIf(),
 		m_pRemoteCharacteristic->getRemoteService()->getClient()->getConnId(),
@@ -147,7 +207,10 @@
 	);
 	if (errRc != ESP_OK) {
 		log_e("esp_ble_gattc_write_char_descr: %d", errRc);
+		return;
 	}
+	m_semaphoreWriteDescrEvt.wait("writeValue");	
+
 	log_v("<< writeValue");
 } // writeValue
 
diff -Naur framework-arduinoespressif32/libraries/BLE/src/BLERemoteDescriptor.h framework-arduinoespressif32_rix/libraries/BLE/src/BLERemoteDescriptor.h
--- framework-arduinoespressif32/libraries/BLE/src/BLERemoteDescriptor.h	2019-10-02 11:52:48.000000000 +0200
+++ framework-arduinoespressif32_rix/libraries/BLE/src/BLERemoteDescriptor.h	2020-01-15 18:28:41.328320900 +0100
@@ -43,11 +43,14 @@
 		BLEUUID                  uuid,
 		BLERemoteCharacteristic* pRemoteCharacteristic
 	);
+	void gattClientEventHandler(esp_gattc_cb_event_t event, esp_gatt_if_t gattc_if, esp_ble_gattc_cb_param_t* evtParam);
+
 	uint16_t                 m_handle;                  // Server handle of this descriptor.
 	BLEUUID                  m_uuid;                    // UUID of this descriptor.
 	std::string              m_value;                   // Last received value of the descriptor.
 	BLERemoteCharacteristic* m_pRemoteCharacteristic;   // Reference to the Remote characteristic of which this descriptor is associated.
 	FreeRTOS::Semaphore      m_semaphoreReadDescrEvt      = FreeRTOS::Semaphore("ReadDescrEvt");
+	FreeRTOS::Semaphore      m_semaphoreWriteDescrEvt     = FreeRTOS::Semaphore("WriteDescrEvt");
 
 
 };
diff -Naur framework-arduinoespressif32/libraries/BLE/src/BLERemoteService.cpp framework-arduinoespressif32_rix/libraries/BLE/src/BLERemoteService.cpp
--- framework-arduinoespressif32/libraries/BLE/src/BLERemoteService.cpp	2019-10-02 11:52:48.000000000 +0200
+++ framework-arduinoespressif32_rix/libraries/BLE/src/BLERemoteService.cpp	2020-01-16 16:33:25.698260600 +0100
@@ -302,10 +302,10 @@
  * @return N/A.
  */
 void BLERemoteService::removeCharacteristics() {
-	for (auto &myPair : m_characteristicMap) {
-	   delete myPair.second;
-	   //m_characteristicMap.erase(myPair.first);  // Should be no need to delete as it will be deleted by the clear
-	}
+	// for (auto &myPair : m_characteristicMap) {
+	//    delete myPair.second;
+	//    //m_characteristicMap.erase(myPair.first);  // Should be no need to delete as it will be deleted by the clear
+	// }
 	m_characteristicMap.clear();   // Clear the map
 	for (auto &myPair : m_characteristicMapByHandle) {
 	   delete myPair.second;
\ No newline at end of file